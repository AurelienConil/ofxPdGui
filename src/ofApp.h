/**
 * @file ofApp.h
 * @brief Classe principale de ofxPdGui - Renderer et gestionnaire de l'interface graphique
 * 
 * ARCHITECTURE GLOBALE DE ofxPdGui :
 * 
 * ofxPdGui est une application autonome qui permet de lire et afficher des patches Pure Data
 * sans d√©pendre du logiciel Pure Data lui-m√™me. L'architecture se compose de deux parties principales :
 * 
 * 1. PARSER/DECODER (PatchParser) :
 *    - Analyse des fichiers .pd pour extraire la structure des objets GUI
 *    - Conversion des param√®tres Pure Data vers des objets C++ utilisables
 *    - Support des objets GUI : bang, toggle, canvas, number, slider
 * 
 * 2. RENDERER (ofApp + classes GUI) :
 *    - Recr√©ation visuelle fid√®le des objets GUI Pure Data
 *    - Gestion des √©v√©nements souris et clavier
 *    - Syst√®me d'optimisation FBO pour les performances
 *    - Interface de callback pr√™te pour l'int√©gration ofxPd
 * 
 * √âTAT ACTUEL DU PROJET :
 * - ‚úÖ Objets GUI impl√©ment√©s : bang, toggle, canvas, number, slider
 * - ‚úÖ Syst√®me de parsing des fichiers .pd
 * - ‚úÖ Optimisations de rendu avec FBO
 * - ‚úÖ Architecture de callbacks pr√©par√©e
 * - üîÑ √Ä venir : int√©gration des sous-patches et externals avec GUI
 * 
 * ROADMAP :
 * - Int√©gration compl√®te avec ofxPd pour l'audio
 * - Support des sous-patches (subpatches)
 * - Support des externals avec interface GUI
 * - Syst√®me de sauvegarde des √©tats
 * 
 * @author Aur√©lien Conil
 * @date 2025
 */

#pragma once

#include "ofMain.h"
#include "PdGuiObject.h"
#include "Toggle.h"
#include "Bang.h"
#include "PatchParser.h"
#include "Slider.h"
#include <memory>

/**
 * @class ofApp
 * @brief Classe principale de l'application ofxPdGui - Gestionnaire du rendu et des interactions
 * 
 * Cette classe est le c≈ìur du syst√®me de rendu de ofxPdGui. Elle est responsable de :
 * 
 * RESPONSABILIT√âS PRINCIPALES :
 * - Chargement et gestion des objets GUI pars√©s depuis les fichiers .pd
 * - Rendu optimis√© des objets GUI avec syst√®me FBO
 * - Gestion des √©v√©nements souris et clavier
 * - Interface avec le syst√®me de callbacks vers Pure Data (via ofxPd)
 * - Optimisation des performances de rendu
 * 
 * SYST√àME FBO :
 * Le syst√®me utilise un Frame Buffer Object (FBO) pour optimiser le rendu :
 * - Rendu s√©lectif : seuls les objets modifi√©s sont redessin√©s
 * - R√©duction des appels de dessin pour de meilleures performances
 * - Support des zones de mise √† jour partielles
 * 
 * ARCHITECTURE DES √âV√âNEMENTS :
 * - Propagation des √©v√©nements souris vers les objets GUI
 * - Gestion centralis√©e des raccourcis clavier
 * - Syst√®me de callbacks pr√™t pour l'int√©gration ofxPd
 */
class ofApp : public ofBaseApp {
public:
    // === M√âTHODES PRINCIPALES DU CYCLE DE VIE ===
    void setup() override;    ///< Initialisation : chargement du patch et configuration FBO
    void update() override;   ///< Mise √† jour des objets GUI et logique de simulation
    void draw() override;     ///< Rendu principal avec optimisations FBO
    
    // === GESTION DES √âV√âNEMENTS SOURIS ===
    // Ces m√©thodes propagent les √©v√©nements vers les objets GUI appropri√©s
    void mousePressed(int x, int y, int button) override;  ///< Clic souris : activation des objets
    void mouseDragged(int x, int y, int button) override;  ///< Drag souris : sliders et interactions
    void mouseReleased(int x, int y, int button) override; ///< Rel√¢chement : fin d'interactions
    void mouseMoved(int x, int y) override;                ///< Mouvement : hover et feedback visuel
    
    // === GESTION DES √âV√âNEMENTS CLAVIER ===
    void keyPressed(int key) override; ///< Raccourcis : 'r'=reset, 'a'=tout activer, 't'=toggle al√©atoire
    
private:
    // === DONN√âES PRINCIPALES ===
    /// Collection de tous les objets GUI charg√©s depuis le fichier .pd
    /// Utilise smart pointers pour une gestion m√©moire s√ªre
    vector<unique_ptr<PdGuiObject>> guiObjects;
    
    // === SYST√àME D'OPTIMISATION FBO ===
    /// Frame Buffer Object pour le rendu optimis√© - √©vite de redessiner tout √† chaque frame
    ofFbo guiFbo;
    /// Flag indiquant si le FBO doit √™tre enti√®rement mis √† jour
    bool fboNeedsUpdate = true;
    
    // === SIMULATION ET TESTS ===
    /// Compteur temporel pour les fonctionnalit√©s de test et simulation
    float simulationTime = 0.0f;
    
    // === M√âTHODES DE CONFIGURATION ===
    void createToggles();     ///< [LEGACY] Cr√©ation manuelle d'objets pour les tests
    void setupCallbacks();    ///< Configuration des callbacks vers Pure Data (ofxPd)
    void setupFbo();          ///< Initialisation du syst√®me FBO
    
    // === M√âTHODES DE RENDU ===
    void drawGuiObjects();                    ///< Rendu direct des objets GUI (m√©thode actuelle)
    void drawGuiObjectsToFbo();              ///< [FUTUR] Rendu optimis√© via FBO
    void drawGuiObjectsToFboWithScissor();   ///< [FUTUR] Rendu FBO avec d√©coupage
    void drawGuiObjectsToFboOptimized();     ///< [FUTUR] Rendu FBO ultra-optimis√©
    
    // === M√âTHODES UTILITAIRES ===
    void simulateAutomaticChanges(); ///< [TEST] Simulation de changements automatiques
    int countActiveToggles();        ///< Comptage des toggles actifs pour le debug
    void drawDebugInfo();            ///< Affichage des informations de d√©bogage
    
    // === OPTIMISATIONS FBO (√Ä VENIR) ===
    /// Fusion des rectangles adjacents pour r√©duire les zones de rendu
    vector<ofRectangle> mergeAdjacentRectangles(const vector<ofRectangle>& rectangles);
    /// Test d'adjacence entre deux rectangles
    bool areAdjacent(const ofRectangle& a, const ofRectangle& b);
};
